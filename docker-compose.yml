services:
  postgres:
    image: postgres:16-alpine
    container_name: oddsapi_postgres
    environment:
      POSTGRES_DB: oddsapi
      POSTGRES_USER: oddsapi
      POSTGRES_PASSWORD: oddsapi
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oddsapi"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - oddsapi_network

  redis:
    image: redis:7-alpine
    container_name: oddsapi_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    environment:
      - REDIS_MAXMEMORY=512mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - oddsapi_network

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: oddsapi_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: oddsapi
      RABBITMQ_DEFAULT_PASS: oddsapi
      RABBITMQ_ERLANG_COOKIE: oddsapi_cookie
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - oddsapi_network
    command: >
      /bin/sh -c "
        apk add --no-cache netcat-openbsd &&
        docker-entrypoint.sh rabbitmq-server"

  prometheus:
    image: prom/prometheus:latest
    container_name: oddsapi_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - oddsapi_network

  grafana:
    image: grafana/grafana:latest
    container_name: oddsapi_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - oddsapi_network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  grafana_data:

networks:
  oddsapi_network:
    driver: bridge 